Lock Free Bank Synchronization Project
======================================

Практическое задание по курсу Параллельное Программирование 2015 год.
Синхронизация без блокировок.

Необходимое ПО
--------------

1. Java SDK 7 или более поздняя:
   http://www.oracle.com/technetwork/java/javase/downloads/index.html

2. Apache Maven 3.x:
   http://maven.apache.org/download.cgi

Описание
--------

Задание включает в себя следующие основные исходные файлы:

* src/main/java/ru/ifmo/pp/Bank.java содержит интерфейс для гипотетического
  банка с набором операций getNumberOfAccounts, getAmount, getTotalAmount, deposit, withdraw, transfer.

* src/main/java/ru/ifmo/pp/BankImpl.java содержит код-заготовку реализации операций банка без блокировок,
  использую основные идеи из работы "A Practical Multi-Word Compare-and-Swap Operation" by T. L. Harris
  c упрощенной (ускоренной) операцией DCSS засчет отсутвия проблемы ABA.
  todo: Код содержит "todo" коментарии в тех местах, которые надо доделать.
  В этих местах стоит код-заглушка таким образом, что код работает правильно при использовании из одного
  потока, но не безопасен для использования из нескольких потоков одновременно.

* pom.xml содержит описание провека для систему сборки Maven. Исплоьзуейте его чтобы создать проект в вашей
  любимой среде разработке. Рекомендуется IntelliJ IDEA. Используя операцию File | Import Project... Указав
  место расположение файла pom.xml вы создадите проект для выполнения задания.

Задание
-------

1. Необходимо доделать реализую BackImpl согласно написанным коментарием так, чтобы она реализовавала интерфейс
   банка без блокировок (lock-free):

   a) Написать многопоточную реализацию метода BankImpl.withdraw
   б) Написать реализацию метода BankImpl.acquire согласно написанной в нем документации.
   в) Написать реализацию метода BankImpl.TransferOp.invokeOperation

2. Для обеспечения гарантий работы без блокировок (lock-free), все операции работающие над несколькими счетами
   (getTotalAmount и transfer) должны захватывать счета для выполнения операции метод acquire в одном и
   том же порядке.

3. Весь код должен содержаться в файле BankImpl.java. В заголовке должна быть вписана фамилия автора после тэга
   @author

4. Код должен быть отформатирован в соответствии со стандартным Java стилем используя 4 пробела для выравнивания
   кода. Следуйте стилю в котором написаны классы Bank и BankImpl. Плохо отформатированный код не будет проверяться.

Сборка и тестирование
---------------------

Проект должен собираться и успешно проходить тестирование с помощью команды "mvn test".
При этом автомически будут запущены сделующе тесты:

* src/test/java/ru/ifmo/pp/FunctionalTest.java проверяет базовую корректность работы операций банка.

* src/test/java/ru/ifmo/pp/MTStressTest.java проверяет основные аспекты корректности работы банка при
  множестве одновременно работающих потоков исполнения.

* src/test/java/ru/ifmo/pp/LinearizabilityTest.java проверяет все аспекты корректности работы банка и
  линеаризуемость операций, сравнивая различные варианты одновременного выполнения операций с различными
  вариантами их перестановки на модельной однопоточной реализации (ru.ifmo.pp.SequentialBank).

Для запуска тестов из IntelliJ IDEA откройте файл с тестом (используйте Сtrl+N для поиска класса по имени) и
запускайте его или отдельный тесты на исполнение с помощью комбинации Ctrl+Shift+F10.

Обратите внимание, что прилагаемая реализация-шаблон проходит только FunctionalTest, но не проходит многопоточные тесты.

Сдача задания
-------------

Для сдачи выполненного задания присылайте мне письмо по электронной почте ответом на письмо с заданием.

      To: elizarov@devexperts.com
 Subject: Re: Задание LockFreeBank 2015

Приложите к письму только файл BankImpl.java (без упаковки через zip и прочего).

Проверьте прохождение тестов перед отсылкой!

За задание будут выставляться баллы исходя из базы в 100 баллов за задание. Для максимального балла за это задание,
небходимо чтобы реализацию удовлетворяла всем требованиям изложенным в секции "Задание".
