Fine Grained Bank Synchronization Project
=========================================

Практическое задание по курсу Параллельное Программирование 2015 год.
Синхронизация с помощью блокировки.

Необходимое ПО
--------------

1. Java SDK 7 или более поздняя:
   http://www.oracle.com/technetwork/java/javase/downloads/index.html

2. Apache Maven 3.x:
   http://maven.apache.org/download.cgi

Описание
--------

Задание включает в себя следующие основные исходные файлы:

* src/main/java/ru/ifmo/pp/Bank.java содержится интерфейся для гипотетического
  банка с набором операций getNumberOfAccounts, getAmount, getTotalAmount, deposit, withdraw, transfer.

* src/main/java/ru/ifmo/pp/BankImpl.java содержится реализация операция банка для
  однопоточного случая. Реализация не безопасная для использования из нескольких потоков одновременно.

* pom.xml содержит описание провека для систему сборки Maven. Исплоьзуейте его чтобы создать проект в вашей
  любимой среде разработке. Рекомендуется IntelliJ IDEA. Используя операцию File | Import Project... Указав
  место расположение файла pom.xml вы создадите проект для выполнения задания.

Задание
-------

1. Необходимо доработать реализую BackImpl так, чтобы она стала безопасной для использования из множества
   потоков одновременно.

2. Для реализации необходимо использовать тонкую блокировку. Синхронизация должна осуществляться для
   каждого счета по отдельности. Добавьте поле lock типа java.util.concurrent.locks.Lock (инерфейс для примитива
   блокировки) в класс BankImpl.Account и используйте класс java.util.concurrent.locks.ReentrantLock в качестве
   стандартной реализации.

3. Для обеспечения линеаризуемости операций должна использоваться двухфазная блокировка всех операций.

4. Для избежания ситуации взаимной блокировки (deadlock) необходимо использовать иерархическую блокировку.

5. Весь код должен содержаться в файле BankImpl.java. В заголовке должна быть вписана фамилия автора после тэга
   @author

6. Код должен быть отформатирован в сотвеетсвевии со стандартным Java стилем используя 4 пробела для выравнивания
   кода. Следуйте стилю в котором написаны классы Bank и BankImpl. Плохо отформатированный код не будет проверяться.

Сборка и тестирование
---------------------

Проект должен собираться и успешно проходить тестирование с помощью команды "mvn test".
При этом автомически будут запущены сделующе тесты:

* src/test/java/ru/ifmo/pp/FunctionalTest.java проверяет базовую корректность работы операций банка.

* src/test/java/ru/ifmo/pp/MTStressTest.java проверяет основные аспекты корректности работы банка при
  множестве одновременно работающих потоков исполнения.

* src/test/java/ru/ifmo/pp/LinearizabilityTest.java проверяет все аспекты корректности работы банка и
  линеаризуемость операций, сравнивая различные варианты одновременного выполнения операций с различными
  вариантами их перестановки на модельной однопоточной реализации.

Для запуска тестов из IntelliJ IDEA откройте файл с тестом (используйте Сtrl+N для поиска класса по имени) и
запускайте его или отдельный тесты на исполнение с помощью комбинации Ctrl+Shift+F10.

Обратите внимание, что прилагаемая реализация проходит только FunctionalTest, но не проходит многопоточные тесты.

Сдача задания
-------------

Для сдачи выполненного задания присылайте мне письмо по электронной почте ОТВЕТОМ на письмо с заданием.

      To: elizarov@devexperts.com
 Subject: Re: Задание FineGrainedBank 2015

Приложите к письму только файл BankImpl.java (без упаковки через zip и прочего).

Проверьте прохождение тестов перед отсылкой!

Оценка будет проводить по принципу зачет/незачет. Для получения зачета за это задание небходимо чтобы реализацию
удовлетворяла всем требованиям изложенным в секции "Задание".

Обратите внимание, что прохождение тестов не достаточно для зачета за это задание! Тесты будут проходить, если
у каждого метода класса BankImpl написать ключевое слово "synchronized" (проверьте!). Но такая реализации,
несмотря на прохождение тестов, не удовлетворяет заданию, которое требудет применение тонкой, а не грубой,
блокировки.
